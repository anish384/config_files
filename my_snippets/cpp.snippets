snippet cp
    #ifdef ONPC
        #define _GLIBCXX_DEBUG
    #endif
    #include <bits/stdc++.h>

    using namespace std;

    /* Macros */
    #define pb push_back 
    #define SWAP(a, b) (((a) ^= (b)), ((b) ^= (a)), ((a) ^= (b)))
    #define py cout << "Yes" << '\n'
    #define pn cout << "No" << '\n'
    #define pyy cout << "yes" << '\n'
    #define pnn cout << "no" << '\n'
    #define pY cout << "YES" << '\n'
    #define pN cout << "NO" << '\n'
    #define nl '\n'
    #define icn(type, var) type var; cin >> var
    #define In(var) cin>>var;
    #define print(var) cout << var << endl

    #define int long long

    /* Size of integer and long long in bits */
    #define soi (sizeof(int) * CHAR_BIT)
    #define sol (sizeof(long long) * CHAR_BIT)

    /* Repetitive Tasks */
    #define fr(i, a, b) for(int i = a; i < b; i++)
    #define fn(i, a) for(int i = a; i >= 0; i--)

    #define d_pair(p) cout << #p << " = (" << p.first << ", " << p.second << ")" << endl


    #define d_con(container) { \
        cout << #container << " = {" << endl << "  "; \
        for (const auto &item : container) cout << item << " "; \
        cout << endl << "}" << endl; \
    }

    #define d_con_pairs(container) { \
        cout << #container << " = {" << endl; \
        for (const auto &p : container) { \
            cout << "  {" << p.first << ", " << p.second << "}"; \
            cout << endl; \
        } \
        cout << "}" << endl; \
    }

    #define d_con_2d(container) { \
        cout << #container << " = {" << endl; \
        for (const auto &row : container) { \
            cout << "  {"; \
            for (const auto &item : row) cout << item << " "; \
            cout << "}" << endl; \
        } \
        cout << "}" << endl; \
    }

    #define dbg(x) cout << #x << " = " << x << endl

    #define dbg2(x, y) cout << #x << " = " << x << ", " << #y << " = " << y << endl

    #define dbg3(x, y, z) cout << #x << " = " << x << ", " << #y << " = " << y << ", " << #z << " = " << z << endl

    #define d_array(arr, n) { \
        cout << #arr << " = {" << endl << "  "; \
        for (int i = 0; i < n; i++) cout << arr[i] << (i < n - 1 ? ", " : ""); \
        cout << endl << "}" << endl; \
    }

    #define d_2darray(arr, rows, cols) { \
        cout << #arr << " = {" << endl; \
        for (int i = 0; i < rows; i++) { \
            cout << "  {"; \
            for (int j = 0; j < cols; j++) cout << (j == 0 ? "" : ", ") << arr[i][j]; \
            cout << "}"; \
            if (i < rows - 1) cout << ","; \
            cout << endl; \
        } \
        cout << "}" << endl; \
    }

    #define d_map(mp) { \
        cout << #mp << " = {" << endl; \
        for (const auto &item : mp) cout << "  {" << item.first << ", " << item.second << "}," << endl; \
        cout << "}" << endl; \
    }

    #define d_set(st) { \
        cout << #st << " = {" << endl << "  "; \
        for (const auto &item : st) cout << item << " "; \
        cout << endl << "}" << endl; \
    }

    #define d_vpii(v) { \
        cout << #v << " = {" << endl; \
        for (const auto &p : v) cout << "  {" << p.first << ", " << p.second << "}," << endl; \
        cout << "}" << endl; \
    }

    /* Typedefs */
    typedef long long ll;
    typedef vector<int> vi;
    typedef vector<pair<int,int>> ii;

    /* Constants */ 
    const int MOD = 1e9 + 7;

    /* Debugging Macros */
    #define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f (const char* name, Arg1&& arg1) { cout << name << " : " << arg1 << endl; }
    template <typename Arg1, typename... Args>
    void __f (const char* names, Arg1&& arg1, Args&&... args)
    {
        const char* comma = strchr (names + 1, ',');
        cout.write (names, comma - names) << " : " << arg1 << " | "; 
        __f (comma + 1, args...);
    }

    /* Inline Functions */
    inline int sq(int x) { return x * x; }
    inline int ceil_div(int a, int b) { return (a + b - 1) / b; }

    /* Power Functions */
    inline int power(int a, int b)
    {
        int x = 1;
        while (b)
        {
            if (b & 1) x *= a;
            a *= a;
            b >>= 1;
        }
        return x;
    }

    ll binpow(ll a, ll b, ll m) {
        a %= m;
        ll res = 1;
        while (b > 0) {
            if (b & 1)
                res = res * a % m;
            a = a * a % m;
            b >>= 1;
        }
        return res;
    }

    /* Custom Templates */
    // Vector input
    template<typename T>
    void vci(vector<T>& vec, int size) {
        vec.resize(size); // Resize the vector once before the loop
        for(int i = 0; i < size; i++) {
            T input; 
            cin >> input; 
            vec[i] = input;
        }
    }

    template <typename T> 
    void vvci(vector<vector<T>>& vec, int rows, int cols) { 
        vec.resize(rows); // Resize the outer vector once before the loop
        for (int i = 0; i < rows; ++i) { 
            vec[i].resize(cols); // Resize each inner vector once before the inner loop
            for (int j = 0; j < cols; ++j) { 
                T input; 
                cin >> input; 
                vec[i][j] = input; 
            } 
        } 
    }

    template <typename Container>
    void sor(Container& container) {
        std::sort(container.begin(), container.end());
    }

    template <typename Container>
    void sord(Container& container) {
        std::sort(container.begin(), container.end(), std::greater<typename Container::value_type>());
    }

    // upto here

    void solve() 
    {${0}
    }

    int32_t main() {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);

        int t = 1; 

        // cin >> t;

        #ifdef ONPC
            printf("Test Case Started: \n\n");
        #endif // ONPC

        while (t--) {
            solve();
            #ifdef ONPC // from: peltorator (youtube)
                cerr << "__________________________" << nl;
            #endif
        }
        #ifdef ONPC 
            cerr << "Finished execution in " << static_cast<double>(clock()) * 1.0 / CLOCKS_PER_SEC << " sec" << nl;
        #endif
        return 0;
    }

snippet st "baseofcpp"
	#include <bits/stdc++.h>
	using namespace std;
	int main()
	{
		${0}
	}

snippet fa "for"
	for(${1};${2};${3}){
		${4}
	}

snippet fe "foreach"
	for(auto &x: ${1}){
		cout<<x<<' ';
	}

snippet fee "foreach"
    for(auto &x: ${1}){
        for(auto &y : x){
            ${2}
        }
    }

snippet tc "testcases"
	int tc = 0;
	cin>>tc;
	while(tc--){
		${0}
	}

snippet wh "while"
	while(${1}){
		${2}
	}

snippet ma "main"
	int main()
	{
		${0}
	}

snippet vi "vector of int"
    vector <int> ${1};
    ${0}

snippet bc "bits"
    #include <bits/stdc++.h>
    ${0}

snippet us "using namespace std;"
    using namespace std;
    ${0}

snippet class "class"
    class ${1:name_of_class}
    {
        ${0}
    };

snippet icn "int n; cin>>n;"
    int n;
    cin >> n;
    ${0}

snippet base "base of cpp"
    #include <bits/stdc++.h>
    using namespace std;

    /* some macros */
    #define pb push_back 
    #define p pop 
    #define pu push 
    /* typedefs */
    typedef long long ll;
    typedef vector<int> vi;
    typedef map<int,int> mi;
    typedef stack<int> st;
    typedef vector<pair<int,int>> ii;

    /* repetitive tasks */
    #define fr(i, a, b) for(int i = a; i < b; i++)
    #define fn(i,a) for(int i = a; i >= 0; i--)

    int main()
    {
        ${0}
    }

snippet ct
    cout<<${1}

snippet ctt
    cout<<${1}<<' '<<${2};
    ${3}

snippet cn
    cin>>${1}

snippet pq
    priority_queue<${1}>${2}
