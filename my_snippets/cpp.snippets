snippet cp
	#include <bits/stdc++.h>
	using namespace std;

	/* typedefs */
	typedef long long ll;
	typedef	vector<int> vi;
	typedef map<int,int> mi;
	typedef stack<int> st;
	
	/* some macros */
	#define pb push_back 
	#define p pop 
	#define pu push 
	
	#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f (const char* name, Arg1&& arg1) { cout << name << " : " << arg1 << endl; }
		template <typename Arg1, typename... Args>
	void __f (const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr (names + 1, ',');
		cout.write (names, comma - names) << " : " << arg1 << " | "; __f (comma + 1, args...);
	}
	
	/* repetitive tasks */
	#define fr(a, b) for(int i = a; i < b; i++)
	#define fn(a) for(int i = a; i >= 0; i--)
	
	/* inline functions */
	inline int square(int x) { return x * x; }
	
	/* power function */
	inline int power(int a, int b)
	{
		int x = 1;
		while (b)
		{
			if (b & 1) x *= a;
			a *= a;
			b >>= 1;
		}
		return x;
	}
	
	void solve()
	{
		${0}
	}
	
	int32_t main() {
		ios::sync_with_stdio(false);
		cin.tie(nullptr);
	
		int t = 1; 
		// cin >> t; 
	
		while (t--) {
			solve();
		}
	
		return 0;
	}
snippet base "baseofcpp"
	#include <bits/stdc++.h>
	using namespace std;
	int main()
	{
		${0}
	}

snippet fa "for"
	for(${1};${2};${3}){
		${4}
	}

snippet fe "foreach"
	for(auto &x: ${1}){
		cout<<x<<' ';
	}

snippet tc "testcases"
	int tc = 0;
	cin>>tc;
	while(tc--){
		${0}
	}

snippet wh "while"
	while(${1}){
		${2}
	}

snippet ma "main"
	int main()
	{
		${0}
	}

snippet vi "vector of int"
    vector <int> ${1};
    ${0}
